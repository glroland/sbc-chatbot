# PIPELINE DEFINITION
# Name: process-document-pipeline
# Inputs:
#    url: str
components:
  comp-convert-pdf-to-document:
    executorLabel: exec-convert-pdf-to-document
    inputDefinitions:
      artifacts:
        pdf:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        output_json:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        output_md:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        output_yaml:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-download-document:
    executorLabel: exec-download-document
    inputDefinitions:
      parameters:
        url:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        pdf:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-store-document-in-vector-db:
    executorLabel: exec-store-document-in-vector-db
deploymentSpec:
  executors:
    exec-convert-pdf-to-document:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - convert_pdf_to_document
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'docling' &&\
          \ \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef convert_pdf_to_document(pdf: Input[Artifact],\n             \
          \               output_md: Output[Artifact],\n                         \
          \   output_json: Output[Artifact],\n                            output_yaml:\
          \ Output[Artifact]):\n    print (f\"Converting document: {pdf.path}\")\n\
          \n    import json\n    import yaml\n    from pathlib import Path\n    from\
          \ docling.backend.pypdfium2_backend import PyPdfiumDocumentBackend\n   \
          \ from docling.datamodel.base_models import InputFormat\n    from docling.document_converter\
          \ import (\n        DocumentConverter,\n        PdfFormatOption,\n     \
          \   WordFormatOption,\n    )\n    from docling_core.types.doc import ImageRefMode\n\
          \    from docling.pipeline.simple_pipeline import SimplePipeline\n    from\
          \ docling.pipeline.standard_pdf_pipeline import StandardPdfPipeline\n\n\
          \    doc_converter = (\n        DocumentConverter(\n            allowed_formats=[\n\
          \                InputFormat.PDF,\n                InputFormat.IMAGE,\n\
          \                InputFormat.DOCX,\n                InputFormat.HTML,\n\
          \                InputFormat.PPTX,\n                InputFormat.ASCIIDOC,\n\
          \                InputFormat.CSV,\n                InputFormat.MD,\n   \
          \         ],  # whitelist formats, non-matching files are ignored.\n   \
          \         format_options={\n                InputFormat.PDF: PdfFormatOption(\n\
          \                    pipeline_cls=StandardPdfPipeline, backend=PyPdfiumDocumentBackend\n\
          \                ),\n                InputFormat.DOCX: WordFormatOption(\n\
          \                    pipeline_cls=SimplePipeline  # , backend=MsWordDocumentBackend\n\
          \                ),\n            },\n        )\n    )\n\n    res = doc_converter.convert(pdf.path)\n\
          \n    print(f\"Document {res.input.file.name} converted.\")\n    print(res.document._export_to_indented_text(max_text_len=16))\n\
          \n    # Export Docling document format to markdowndoc:\n    with (output_md.path).open(\"\
          w\") as fp:\n        fp.write(res.document.export_to_markdown(image_mode\
          \ = ImageRefMode.PLACEHOLDER))\n\n    with (output_json.path).open(\"w\"\
          ) as fp:\n        fp.write(json.dumps(res.document.export_to_dict(), indent=4))\n\
          \n    with (output_yaml.path).open(\"w\") as fp:\n        fp.write(yaml.safe_dump(res.document.export_to_dict()))\n\
          \n"
        image: python:3.9
    exec-download-document:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - download_document
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'requests' &&\
          \ \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef download_document(url: str, pdf: Output[Artifact]):\n    print\
          \ (f\"Downloading Document: {url}\")\n\n    import requests\n\n    response\
          \ = requests.get(url, stream=True)\n    response.raw.decode_content = True\n\
          \n    output_file = pdf.path\n    with open(output_file, 'wb') as f:\n \
          \       for chunk in response.iter_content(chunk_size=1024): \n        \
          \    f.write(chunk)\n\n    print (\"Download complete\")\n\n"
        image: python:3.9
    exec-store-document-in-vector-db:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - store_document_in_vector_db
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef store_document_in_vector_db():\n    pass\n\n"
        image: python:3.9
pipelineInfo:
  name: process-document-pipeline
root:
  dag:
    tasks:
      convert-pdf-to-document:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-convert-pdf-to-document
        dependentTasks:
        - download-document
        inputs:
          artifacts:
            pdf:
              taskOutputArtifact:
                outputArtifactKey: pdf
                producerTask: download-document
        taskInfo:
          name: convert-pdf-to-document
      download-document:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-download-document
        inputs:
          parameters:
            url:
              componentInputParameter: url
        taskInfo:
          name: download-document
      store-document-in-vector-db:
        cachingOptions: {}
        componentRef:
          name: comp-store-document-in-vector-db
        dependentTasks:
        - convert-pdf-to-document
        taskInfo:
          name: store-document-in-vector-db
  inputDefinitions:
    parameters:
      url:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.12.1
